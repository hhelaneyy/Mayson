from datetime import datetime
import random
import disnake
from disnake.ext import commands
import sqlite3
from core.utilities.embeds import descriptions, errors

conn = sqlite3.connect('Mayson.db')
cursor = conn.cursor()

class LogsCog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    def get_log_channel(self, guild):
        connection = sqlite3.connect('Mayson.db')
        cursor = connection.cursor()
        cursor.execute('SELECT channel_id FROM logs_channel WHERE guild_id=?', (str(guild.id),))
        result = cursor.fetchone()
        if result:
            channel_id = result[0]
            return guild.get_channel(channel_id)
        return None
        
    @commands.Cog.listener()
    async def on_message_edit(self, before, after):
        log_channel = self.get_log_channel(before.guild)
        if log_channel:
            if before.author.bot or before.webhook_id:
                return

            if before.content == after.content:
                return
            else:
                embed = disnake.Embed(title="üîñ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.", description=f"–°–µ—Ä–≤–µ—Ä –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ.", color=disnake.Color.gold())
                embed.add_field(name="–ê–≤—Ç–æ—Ä:", value=f'{before.author.mention}')
                embed.add_field(name="–ö–∞–Ω–∞–ª:", value=f'{before.channel.mention}')
                embed.add_field(name="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é", value=f'[–°–æ–æ–±—â–µ–Ω–∏–µ]({after.jump_url})')
                embed.add_field(name="–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", value=f'```{before.content}```', inline=False)
                embed.add_field(name="–ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞:", value=f'```{after.content}```', inline=False)
                await log_channel.send(embed=embed)
        else:
            return

    @commands.Cog.listener()
    async def on_message_delete(self, before):
        log_channel = self.get_log_channel(before.guild)
        if log_channel:
            if before.author.bot or before.webhook_id:
                return
            else:
                embed = disnake.Embed(title="üö´ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.", description=f"–°–µ—Ä–≤–µ—Ä –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ.", color=disnake.Color.gold())
                embed.add_field(name="–ê–≤—Ç–æ—Ä:", value=f'{before.author.mention}')
                embed.add_field(name="–ö–∞–Ω–∞–ª:", value=f'{before.channel.mention}')
                embed.add_field(name='–ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:', value=before.content, inline=False)
                await log_channel.send(embed=embed)
        else:
            return
        
    @commands.Cog.listener()
    async def on_member_join(self, user):
        log_channel = self.get_log_channel(user.guild)
        created_at_indicator = f'<t:{int(user.created_at.timestamp())}:F>'
        if log_channel:
            embed = disnake.Embed(title="üë§ –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —Å–µ—Ä–≤–µ—Ä–∞.", description=f"–°–µ—Ä–≤–µ—Ä –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.", color=disnake.Color.gold())
            embed.add_field(name="–ù–∏–∫–Ω–µ–π–º —É—á–∞—Å—Ç–Ω–∏–∫:", value=f'{user.mention}')
            embed.add_field(name='–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', value=created_at_indicator)
            embed.set_thumbnail(url=user.avatar)
            embed.set_footer(text=random.choice(descriptions), icon_url=user.guild.icon)

            await log_channel.send(embed=embed)

    @commands.Cog.listener()
    async def on_member_remove(self, member):
        log_channel = self.get_log_channel(member.guild)
        created_at_indicator = f'<t:{int(member.created_at.timestamp())}:F>'
        if log_channel:
            embed = disnake.Embed(title="üë§ –£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä.", description=f"–°–µ—Ä–≤–µ—Ä –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª, —á—Ç–æ –Ω–∞ –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ.", color=disnake.Color.gold())
            embed.add_field(name="–ù–∏–∫–Ω–µ–π–º —É—á–∞—Å—Ç–Ω–∏–∫:", value=f'{member.mention}')
            embed.add_field(name='–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', value=created_at_indicator)
            embed.set_thumbnail(url=member.avatar)
            embed.set_footer(text=random.choice(descriptions), icon_url=member.guild.icon)

            await log_channel.send(embed=embed)

    @commands.Cog.listener()
    async def on_member_ban(self, guild, user):
        log_channel = self.get_log_channel(guild)
        created_at_indicator = f'<t:{int(user.created_at.timestamp())}:F>'
        if log_channel:
            embed = disnake.Embed(title="üõë –£—á–∞—Å—Ç–Ω–∏–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", description=f"–°–µ—Ä–≤–µ—Ä –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª, —á—Ç–æ –∫—Ç–æ-—Ç–æ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω..", color=disnake.Color.gold())
            embed.add_field(name="–ù–∏–∫–Ω–µ–π–º —É—á–∞—Å—Ç–Ω–∏–∫:", value=f'{user.mention}')
            embed.add_field(name='–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', value=created_at_indicator)
            embed.add_field(name='–ü—Ä–∏—á–∏–Ω–∞:', value='???')
            embed.set_thumbnail(url=user.avatar)
            embed.set_footer(text=random.choice(descriptions), icon_url=guild.icon)
            await log_channel.send(embed=embed)

    @commands.Cog.listener()
    async def on_member_unban(self, guild, user):
        log_channel = self.get_log_channel(guild)
        created_at_indicator = f'<t:{int(user.created_at.timestamp())}:F>'
        if log_channel:
            embed = disnake.Embed(title="‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", description=f"–°–µ—Ä–≤–µ—Ä –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª, —á—Ç–æ –∫—Ç–æ-—Ç–æ –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω.", color=disnake.Color.gold())
            embed.add_field(name="–ù–∏–∫–Ω–µ–π–º —É—á–∞—Å—Ç–Ω–∏–∫:", value=f'{user.mention}')
            embed.add_field(name='–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', value=created_at_indicator)
            embed.set_thumbnail(url=user.avatar)
            embed.set_footer(text=random.choice(descriptions), icon_url=guild.icon)
            await log_channel.send(embed=embed)

def setup(bot: commands.Bot):
    bot.add_cog(LogsCog(bot))