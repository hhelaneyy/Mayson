import asyncio
import random
import disnake
from disnake.ext import commands
from datetime import datetime
import platform
from disnake import ui
from typing import List
import sqlite3
from googletrans import Translator
from core.utilities.embeds import descriptions, errors

conn = sqlite3.connect('Mayson.db')
cursor = conn.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS users_age (
        user_id INTEGER PRIMARY KEY,
        age INTEGER
    )
''')
conn.commit()

class MyBot(commands.Bot):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.add_cog(UtilsCog(self))

class UtilsCog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    async def cog_before_invoke(self, ctx):
        if not hasattr(self.bot, 'start_time'):
            self.bot.start_time = datetime.now()

    @commands.slash_command(name='translator', description='–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –¥–∞–∂–µ –Ω–∞ –¥–æ—Ç–µ—Ä—Å–∫–∏–π!')
    async def trans(self, inter: disnake.ApplicationCommandInteraction, phrase: str, lang):
        await inter.response.defer()
        translator = Translator()
        translation = translator.translate(phrase, dest=lang)
        emb = disnake.Embed(title=f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω! [ {phrase} ]", description=f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –º–æ–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞.", color=disnake.Color.random())
        emb.add_field(name='–í–∞—à –ø–µ—Ä–µ–≤–æ–¥:', value=f'```{translation.text}```')
        emb.set_footer(text=random.choice(descriptions), icon_url=inter.bot.user.avatar)
        await inter.followup.send(embed = emb)

    @commands.command(name="stats", description='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ—è.')
    async def stats(self, inter: disnake.ApplicationCommandInteraction):    
            author = inter.author
            formatted_time = f"<t:{int(self.bot.start_time)}:R>"
            commands = len(inter.bot.commands) + len(inter.bot.slash_commands)
            guilds = len(self.bot.guilds)
            forbidden_users_count = len(self.get_forbidden_users())
            users = len(self.bot.users)

            first_info = (
                f'üïë | –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: __**{formatted_time}**__',
                f"üë®üèª‚Äçüíª | –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫(–∏): __**{self.bot.owner.name}**__",
            )

            about_bot = (
                f"üßä | –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: __**Python {platform.python_version()}**__",
                f"üíΩ | –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: __**{platform.platform()}**__",
                f'üîÑÔ∏è | –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: __**–ë–µ—Ç–∞ 2.1**__',
                f"üîñ | –°—Ç–∞—Ç—É—Å: __**–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...**__",
                f"üèÇüèª | –ó–∞–¥–µ—Ä–∂–∫–∞: __**{round(self.bot.latency * float(1000))}–º—Å.**__",
            )

            other = (
                f"üî• | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥: __**{commands}**__",
                f'üö´ | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ß–°: __**{forbidden_users_count}**__',
                f"üíª | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: __**{guilds}**__",
                f"üë§ | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: __**{users}**__",
            )

            emb = disnake.Embed(title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ Mayson", url="https://discord.gg/ThpPgFFBHC", color=disnake.Color.random())
            emb.add_field(name="> –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", value='\n'.join(first_info), inline=False)
            emb.add_field(name="> –û –±–æ—Ç–µ", value= '\n'.join(about_bot), inline=False)
            emb.add_field(name="> –ü—Ä–æ—á–µ–µ", value='\n'.join(other), inline=False)
            emb.set_thumbnail(url=self.bot.user.avatar.url)
            emb.set_footer(text=random.choice(descriptions), icon_url=author.avatar.url)
            await inter.send(embed=emb)

    @commands.slash_command(name='server', description='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.')
    async def server(self, inter: disnake.ApplicationCommandInteraction):
            guild = inter.guild
            author = inter.author
            rule_channel = guild.rules_channel.mention
            region = inter.guild.preferred_locale
            members = inter.guild.member_count
            mfa_lvl = inter.guild.mfa_level
            verification = inter.guild.verification_level
            max_members = inter.guild.max_members
            roles = len(guild.roles)
            boost_role = inter.guild.premium_subscriber_role
            boosters = guild.premium_subscription_count
            boost_tier = guild.premium_tier
            boost_progress = guild.premium_progress_bar_enabled
            channels = len(guild.channels)
            text_channels = len(guild.text_channels)
            voice_channels = len(guild.voice_channels)
            emojis = len(guild.emojis)
            stikers = len(guild.stickers)

            if boost_progress == False:
                boost_progress = '–í—ã–∫–ª—é—á–µ–Ω'
            if boost_progress == True:
                boost_progress = '–í–∫–ª—é—á–µ–Ω'

            if mfa_lvl == 0:
                mfa_lvl = "–í—ã–∫–ª—é—á–µ–Ω–∞"
            else:
                mfa_lvl= "–í–∫–ª—é—á–µ–Ω–∞"

            about_guild = (
                f'–í–ª–∞–¥–µ–ª–µ—Ü: **{guild.owner.name}**',
                f'ID —Å–µ—Ä–≤–µ—Ä–∞: **{guild.id}**',
                f'–†–µ–≥–∏–æ–Ω: **{region}**',
                f'–£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≤–µ—Ä–∫–∏: **{verification}**',
                f'–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: **{mfa_lvl}**',
            )

            roles = (
                f'–†–æ–ª–µ–π: **{roles}**',
                f'–í–∞—à–∞ –≤—ã—Å—à–∞—è —Ä–æ–ª—å: **{author.top_role.mention}**',
                f'–†–æ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∞–≤—à–∏—Ö: **{boost_role.mention if boost_role else "–†–æ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."}**',
            )

            channels_and_boosts = (
                f'–ü—Ä–æ–≥—Ä–µ—Å—Å –ë–∞—Ä: **{boost_progress}**',
                f'–ü–æ–¥–¥–µ—Ä–∂–∞–≤—à–∏—Ö: **{boosters or "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö –Ω–µ—Ç."}**',
                f'–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏: **{boost_tier}**',
                f'---------------------------------',
                f'–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: **{channels}**',
                f'–ö–∞–Ω–∞–ª –ø—Ä–∞–≤–∏–ª: **{rule_channel or "–ö–∞–Ω–∞–ª–∞ –ø—Ä–∞–≤–∏–ª –Ω–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."}**',
                f'–¢–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: **{text_channels}**',
                f'–ì–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: **{voice_channels}**',
            )

            other = (
                f'–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: **{members}**',
                f'–°—Ç–∏–∫–µ—Ä—ã: **{stikers}**',
                f'–≠–º–æ–¥–∑–∏: **{emojis}**',
                f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: **{max_members}**',
                f'–ë–æ—Ç–æ–≤: **{len(([member for member in guild.members if member.bot]))}**',
            )

            emb = disnake.Embed(title=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ {guild.name}", description=guild.description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.', color=disnake.Color.random())
            emb.add_field(name="> –û —Å–µ—Ä–≤–µ—Ä–µ:", value='\n'.join(about_guild), inline=False)
            emb.add_field(name="> –†–æ–ª–∏:", value='\n'.join(roles), inline=False)
            emb.add_field(name="> –ö–∞–Ω–∞–ª—ã –∏ –ë—É—Å—Ç—ã:", value='\n'.join(channels_and_boosts), inline=False)
            emb.add_field(name="> –ü—Ä–æ—á–µ–µ:", value='\n'.join(other), inline=False)

            if guild.banner:
                emb.set_image(url=guild.banner)
            else:
                pass
            
            emb.set_thumbnail(url=guild.icon)
            await inter.response.send_message(embed = emb)

    def get_forbidden_users(self):
        connection = sqlite3.connect('Mayson.db')
        cursor = connection.cursor()
        cursor.execute("SELECT user_id FROM forbidden_users")
        forbidden_users = [row[0] for row in cursor.fetchall()]
        connection.close()
        return forbidden_users
    
    @commands.command(description='–ü–æ–º–æ–≥—É –≤—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö Discord.')
    async def user(self, ctx, user: disnake.User = None):
        author = ctx.author
        if user is None:
            user = author

        if self.is_user_forbidden(author.id):
            m1 = disnake.Embed(title="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", description="–Ø —á—É–≤—Å—Ç–≤—É—é –≤ –≤–∞—Å –ø–ª–æ—Ö—É—é —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫—É.", color=0xff6969)
            m1.add_field(name="–ß—Ç–æ –∂–µ –Ω–µ —Ç–∞–∫?", value=f"```–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã, —Ç.–∫ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß—ë—Ä–Ω–æ–º –°–ø–∏—Å–∫–µ. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å {self.bot.owner.name}.```")
            m1.set_footer(text=f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±–ª–∞–≥–æ–¥–∞—Ä—è {self.bot.owner.name}", icon_url=self.bot.owner.avatar.url)
            await ctx.send(embed=m1)
            return
        
        banner = await self.bot.fetch_user(user.id)
        created_at_indicator = f'<t:{int(user.created_at.timestamp())}:F>'

        cursor.execute('SELECT status FROM status WHERE user_id = ?', (user.id,))
        row = cursor.fetchone()
        if row:
            user_status = row[0]
        else:
            user_status = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

        cursor.execute('SELECT warning_count FROM global_warns WHERE user_id = ?', (user.id,))
        row = cursor.fetchone()
        if row:
            gl_count = row[0]
        else:
            gl_count = '0'

        is_forbidden = self.is_user_forbidden(user.id)
        forbidden_status = "–î–∞" if is_forbidden else "–ù–µ—Ç"

        all_info = (
            f'**üë§  |  –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: __{user.name}__**',
            f"**üí´  |  ID: __{user.id}__**",
            f'**üí•  |  –°—Ç–∞—Ç—É—Å: __{user_status}__**',    
        )

        user_info = (
            f'**üåç  |  –†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–µ–Ω: {created_at_indicator}**',
            f'**‚ö†Ô∏è  |  –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: __{gl_count}__**',
            f'**üö´  |  –í —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ: __{forbidden_status}__**',
        )

        emb = disnake.Embed(color=disnake.Color.random())
        emb.add_field(name="> –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", value='\n'.join(all_info), inline=False)
        emb.add_field(name="> –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ", value='\n'.join(user_info), inline=False)
        emb.set_author(name=user.name, icon_url=user.avatar)

        if banner and banner.banner:
            emb.set_image(url=banner.banner.url)
        if banner is None:
            return
        
        emb.set_thumbnail(url=user.avatar)
        await ctx.reply(embed=emb)

    @commands.command(description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ —Å–µ—Ä–≤–µ—Ä–∞.")
    async def profile(self, inter: disnake.ApplicationCommandInteraction, user: disnake.Member | disnake.User = None):
        author = inter.author
        activity = '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.'
        if user is None:
            user = inter.author

        if self.is_user_forbidden(author.id):
            m1 = disnake.Embed(title="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", description="–Ø —á—É–≤—Å—Ç–≤—É—é –≤ –≤–∞—Å –ø–ª–æ—Ö—É—é —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫—É.", color=0xff6969)
            m1.add_field(name="–ß—Ç–æ –∂–µ –Ω–µ —Ç–∞–∫?", value=f"```–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã, —Ç.–∫ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß—ë—Ä–Ω–æ–º –°–ø–∏—Å–∫–µ. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å {self.bot.owner.name}.```")
            m1.set_footer(text=f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±–ª–∞–≥–æ–¥–∞—Ä—è {self.bot.owner.name}", icon_url=self.bot.owner.avatar.url)
            await inter.send(embed=m1)
            return
        
        if user.activity:
            if user.activity.type == disnake.ActivityType.playing:
                activity = f"üéÆ –ò–≥—Ä–∞–µ—Ç –≤ {user.activity.name}"
            elif user.activity.type == disnake.ActivityType.streaming:
                activity = f"üìü –°—Ç—Ä–∏–º–∏—Ç {user.activity.name}"
            elif user.activity.type == disnake.ActivityType.listening:
                activity = f"üéß –°–ª—É—à–∞–µ—Ç {user.activity.name}"
            elif user.activity.type == disnake.ActivityType.watching:
                activity = f"üëÅÔ∏è –°–º–æ—Ç—Ä–∏—Ç {user.activity.name}"
            else:
                activity = user.activity
        
        banner = await self.bot.fetch_user(user.id)

        created_at_indicator = f'<t:{int(user.created_at.timestamp())}:F>'
        joined_at_indicator = f'<t:{int(user.joined_at.timestamp())}:F>'

        cursor.execute('SELECT age FROM users_age WHERE user_id = ?', (user.id,))
        row = cursor.fetchone()
        if row:
            age = row[0]
        else:
            age = "–ù–µ —É–∫–∞–∑–∞–Ω."

        cursor.execute('SELECT status FROM status WHERE user_id = ?', (user.id,))
        row = cursor.fetchone()
        if row:
            user_status = row[0]
        else:
            user_status = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

        cursor.execute('SELECT warning_count FROM warnings WHERE guild_name = ? AND user_id = ?', (inter.guild.name, user.id))
        row = cursor.fetchone()
        if row:
            warning_count = row[0]
        else:
            warning_count = '0'

        cursor.execute('SELECT warning_count FROM global_warns WHERE user_id = ?', (user.id,))
        row = cursor.fetchone()
        if row:
            gl_count = row[0]
        else:
            gl_count = '0'

        is_forbidden = self.is_user_forbidden(user.id)
        forbidden_status = "–î–∞" if is_forbidden else "–ù–µ—Ç"

        all_info = (
            f'**üë§  |  –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: __{user.name}__**',
            f"**üí´  |  ID: __{user.id}__**",
            f'**üí•  |  –°—Ç–∞—Ç—É—Å: __{user_status}__**',    
        )

        user_info = (
            f'**üåç  |  –†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–µ–Ω: {created_at_indicator}**',
            f'**üì∫  |  –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –≤: {joined_at_indicator}**',
            f'**üé≠  |  –í—ã—Å—à–∞—è —Ä–æ–ª—å: {user.top_role.mention}**',
            f'**‚ö†Ô∏è  |  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: \n ‚Äî üö´ | –ì–ª–æ–±–∞–ª—å–Ω—ã–µ: __{gl_count}__**\n ** ‚Äî  üî• | –°–µ—Ä–≤–µ—Ä–Ω—ã–µ: __{warning_count}__**',
            f'**üîû  |  –í–æ–∑—Ä–∞—Å—Ç: __{age}__**',
        )

        other_info = (
            f'**üö´  |  –í —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ: __{forbidden_status}__**',
            f'**üß†  |  –ê–≤–∞—Ç–∞—Ä: [–û—Ç–∫—Ä—ã—Ç—å]({user.avatar.url})**',
        )

        if banner and banner.banner:
            other_info += (f'**üö©  |  –ë–∞–Ω–Ω–µ—Ä: [–û—Ç–∫—Ä—ã—Ç—å]({banner.banner.url})**', )

        view = ProfileView(self.bot, inter.author.id)

        if user.id != inter.author.id:
            view.children = []

            view.bot = self.bot

        emb = disnake.Embed(description=activity, color=disnake.Color.random())
        emb.add_field(name="> –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", value='\n'.join(all_info), inline=False)
        emb.add_field(name="> –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ", value='\n'.join(user_info), inline=False)
        emb.add_field(name="> –ü—Ä–æ—á–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", value='\n'.join(other_info), inline=False)
        emb.set_author(name=user.name, icon_url=user.avatar)

        if banner and banner.banner:
            emb.set_image(url=banner.banner.url)
        if banner is None:
            return
        
        emb.set_thumbnail(url=user.avatar)
        await inter.reply(embed=emb, view=view)

    def is_user_forbidden(self, user_id):
        connection = sqlite3.connect('Mayson.db')
        cursor = connection.cursor()
        cursor.execute("SELECT * FROM forbidden_users WHERE user_id = ?", (user_id,))
        forbidden_user = cursor.fetchone()
        connection.close()
        return forbidden_user is not None

class ProfileView(ui.View):
    def __init__(self, bot, author_id):
        super().__init__()
        self.timeout = 20
        self.age = None
        self.bot = bot
        self.author_id = author_id

    async def interaction_check(self, interaction: disnake.MessageInteraction) -> bool:
        return interaction.user.id == self.author_id

    @ui.button(label="–£–∫–∞–∑–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç", style=disnake.ButtonStyle.green)
    async def set_age(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):

        await interaction.response.defer()
        try:
            age_msg = await interaction.channel.send("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç, —É –≤–∞—Å –µ—Å—Ç—å 20 —Å–µ–∫—É–Ω–¥.")

            def check_age(m):
                return m.author == interaction.user and m.channel == age_msg.channel

            age_response = await self.bot.wait_for("message", check=check_age, timeout=self.timeout)

            if age_response.content.isdigit() and 14 <= int(age_response.content) < 100:
                self.age = int(age_response.content)
                await age_msg.delete()
                await age_response.add_reaction("‚úÖ")

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                cursor.execute('INSERT OR REPLACE INTO users_age VALUES (?, ?)', (interaction.user.id, self.age))
                conn.commit()
            elif int(age_response.content) < 14:
                await age_msg.delete()
                embed = disnake.Embed(title="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.", color=disnake.Color.brand_red())
                embed.add_field(name="–û—Ç —á–µ–≥–æ –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã?", value="```–¢—ã –∫–∞–∫ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è, –º–∞–ª—å—á–∏–∫?```", inline=False)
                embed.set_footer(text=random.choice(errors), icon_url=self.bot.user.avatar)
                await interaction.channel.send(embed=embed)
            elif int(age_response.content) > 100:
                await age_msg.delete()
                embed = disnake.Embed(title="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.", color=disnake.Color.brand_red())
                embed.add_field(name="–û—Ç —á–µ–≥–æ –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã?", value="```–ü–æ–∑–≤–æ–Ω–∏ –º–Ω–µ –Ω–∞ SCP-1576, –∞ –Ω–µ —á–µ—Ä–µ–∑ —á–∞—Ç.```", inline=False)
                embed.set_footer(text=random.choice(errors), icon_url=self.bot.user.avatar)
                await interaction.channel.send(embed=embed)

        except asyncio.TimeoutError:
            await age_msg.delete()
            embed = disnake.Embed(title="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.", color=disnake.Color.brand_red())
            embed.add_field(name="–û—Ç —á–µ–≥–æ –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã?", value="```–í—ã –Ω–µ —É—Å–ø–µ–ª–∏ —É–∫–∞–∑–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç.```", inline=False)
            await interaction.channel.send(embed=embed, delete_after=5)
            return

def setup(bot: commands.Bot):
    bot.add_cog(UtilsCog(bot))